import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as p,o as e}from"./app-By3Qqt_-.js";const l={};function t(o,s){return e(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="第8章-循环结构-while语句-🔄" tabindex="-1"><a class="header-anchor" href="#第8章-循环结构-while语句-🔄"><span>第8章：循环结构_while语句 🔄</span></a></h1><h2 id="🗺️-学习地图" tabindex="-1"><a class="header-anchor" href="#🗺️-学习地图"><span>🗺️ 学习地图</span></a></h2><p><strong>【你的学习进度】</strong><br> ✅ 第1章：初识C++<br> ✅ 第2章：C++的输出cout<br> ✅ 第3章：C++的变量<br> ✅ 第4章：C++的输入cin<br> ✅ 第5章：基本数据类型<br> ✅ 第6章：选择结构_if语句<br> ✅ 第7章：选择结构_switch语句<br> 👉 第8章：循环结构_while语句【你在这里】<br> ⬜ 后续章节...</p><h2 id="🔁-从选择到循环-程序的重复执行" tabindex="-1"><a class="header-anchor" href="#🔁-从选择到循环-程序的重复执行"><span>🔁 从选择到循环：程序的重复执行</span></a></h2><p><strong>【故事开始】</strong> 小明的游戏开发进行得很顺利，他已经使用if语句和switch语句实现了玩家可以做不同选择的功能。但是现在他面临一个新问题：他希望让游戏角色自动向前走10步，如果用目前学过的知识，他需要复制粘贴&quot;向前走一步&quot;的代码10次！小红对他说：&quot;这时候我们需要一个新的魔法工具——循环！它就像是一个自动复印机，可以帮我们省去重复写相同代码的麻烦。&quot;今天，我们将和小明一起学习这个强大的魔法工具！</p><p>在前面的两章中，我们学习了如何使用<code>if</code>语句（第6章）和<code>switch</code>语句（第7章）让程序根据不同的条件执行不同的代码。这些选择结构使我们的程序能够&quot;做决定&quot;，但它们只能让程序选择一条路径执行一次。</p><p>但在现实生活中，我们经常需要重复执行某些任务。想象一下，如果你需要向100个朋友发送同样的生日邀请函，你会怎么做？一个一个地写100次相同的内容？那太累了！在现实生活中，我们会使用复印机来解决这个问题。</p><p>![循环就像是一个自动复印机，可以重复执行相同的任务]</p><p>在编程中，我们也有类似的&quot;复印机&quot;——循环结构！循环允许我们告诉计算机&quot;重复执行这段代码，直到某个条件不再满足为止&quot;。这样，我们就可以用几行代码完成需要重复多次的任务，大大提高编程效率。</p><p><strong>【快速检查】</strong> 为什么我们需要循环结构？ A. 让程序看起来更专业 B. 避免重复编写相同的代码 C. 使程序运行得更快 D. 减少程序文件的大小</p><p>(思考一下再看答案...答案是B)</p><h2 id="🔄-while循环-条件满足时一直执行" tabindex="-1"><a class="header-anchor" href="#🔄-while循环-条件满足时一直执行"><span>🔄 while循环：条件满足时一直执行</span></a></h2><p><code>while</code>循环是最基本的循环结构之一。它的工作方式很简单：只要条件为真，就一直执行循环体内的代码。这与<code>if</code>语句有些相似，但<code>if</code>语句只执行一次，而<code>while</code>循环会重复执行。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体：只要条件为真，就重复执行这里的代码</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【生活类比】</strong> 想象while循环就像是妈妈检查你的房间是否干净：</p><ul><li>妈妈看到房间不干净（条件为真）</li><li>妈妈让你打扫（执行循环体）</li><li>打扫后，妈妈再次检查（重新评估条件）</li><li>如果还不干净，继续打扫；如果干净了，就停止（跳出循环）</li></ul><p><strong>【编程思维】</strong> while循环的执行流程：</p><ol><li>检查循环条件</li><li>如果条件为真，执行循环体内的代码</li><li>循环体执行完毕后，回到第1步</li><li>如果条件为假，跳过循环体，执行循环后的代码</li></ol><p>让我们看一个例子，使用<code>while</code>循环来倒数发射火箭：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token comment">// 在Linux/Mac上，使用 #include &lt;unistd.h&gt; 并用 sleep(1) 代替 Sleep(1000)</span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> countdown <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;准备发射火箭！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>countdown <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> countdown <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;...&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        countdown<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 每次循环将倒计时减1</span></span>
<span class="line">        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 暂停1秒（1000毫秒）</span></span>
<span class="line">        <span class="token comment">// sleep(1);  // 暂停1秒（Linux/Mac）</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;发射！🚀&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序会从10倒数到1，每秒输出一个数字，然后显示&quot;发射！🚀&quot;。</p><p><strong>【记忆助手】</strong> 记住while循环的结构： &quot;while后面是条件，大括号围着代码， 条件为真就执行，执行完再来检查。 直到条件变成假，循环才会退出来。&quot;</p><h2 id="🧮-使用while循环计算总和" tabindex="-1"><a class="header-anchor" href="#🧮-使用while循环计算总和"><span>🧮 使用while循环计算总和</span></a></h2><p>循环非常适合用来进行累加计算。例如，我们可以计算1到100的所有数字之和：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 用来存储总和</span></span>
<span class="line">    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 从1开始</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>  <span class="token comment">// 将当前数字加到总和中</span></span>
<span class="line">        number<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 移动到下一个数字</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;1到100的所有数字之和是：&quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序会计算1+2+3+...+100的结果，输出5050。如果没有循环，我们可能需要写100行代码来完成这个任务！</p><p><strong>【数学连接】</strong> 数学中有一个公式可以直接计算从1到n的所有整数之和：sum = n * (n + 1) / 2。对于n=100，我们可以计算：100 * 101 / 2 = 5050。这正是我们程序计算出的结果！</p><p><strong>【真实场景】</strong> 现实生活中有很多需要累加计算的场景，例如：</p><ul><li>银行计算你每个月的存款总额</li><li>学校计算班级的总分和平均分</li><li>跑步应用统计你一周内跑步的总距离</li></ul><h2 id="🎮-用户控制的循环" tabindex="-1"><a class="header-anchor" href="#🎮-用户控制的循环"><span>🎮 用户控制的循环</span></a></h2><p>循环也可以根据用户的输入来控制。例如，我们可以创建一个简单的猜数字游戏，结合我们在第6章学习的条件语句：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 初始化随机数生成器</span></span>
<span class="line">    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 生成1到100之间的随机数</span></span>
<span class="line">    <span class="token keyword">int</span> secretNumber <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> guess<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> attempts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;我想了一个1到100之间的数字。你能猜出来吗？&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 循环直到猜对为止</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入你的猜测：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> guess<span class="token punctuation">;</span></span>
<span class="line">        attempts<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">&lt;</span> secretNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;太小了！再试一次。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>guess <span class="token operator">&gt;</span> secretNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;太大了！再试一次。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;恭喜你猜对了！答案就是 &quot;</span> <span class="token operator">&lt;&lt;</span> secretNumber <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;你总共猜了 &quot;</span> <span class="token operator">&lt;&lt;</span> attempts <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; 次。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 跳出循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个游戏中，程序会随机选择一个数字，然后让用户一直猜，直到猜对为止。每次猜测后，程序会给出&quot;太大了&quot;或&quot;太小了&quot;的提示。</p><p><strong>【快速检查】</strong> 在上面的猜数字游戏中，如果用户永远猜不对，会发生什么？ A. 程序会自动结束 B. 程序会进入无限循环 C. 程序会显示正确答案 D. 程序会崩溃</p><p>(思考一下再看答案...答案是B，因为while(true)创建了一个无限循环，只有猜对时才会通过break跳出循环)</p><h2 id="⚠️-无限循环与break语句" tabindex="-1"><a class="header-anchor" href="#⚠️-无限循环与break语句"><span>⚠️ 无限循环与break语句</span></a></h2><p>有时，我们可能不知道循环需要执行多少次，这时可以使用&quot;无限循环&quot;，并在适当的时候使用<code>break</code>语句跳出循环：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一系列数字（输入-1结束）：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 无限循环</span></span>
<span class="line">        <span class="token keyword">int</span> number<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 如果输入-1，跳出循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>  <span class="token comment">// 将输入的数字加到总和中</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;所有输入数字的总和是：&quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，程序会一直要求用户输入数字，直到用户输入-1为止，然后计算所有输入数字的总和（不包括-1）。</p><p><strong>【常见错误】</strong> 使用无限循环时最容易犯的错误是忘记提供退出循环的方式（如break语句），这会导致程序永远运行下去，称为&quot;死循环&quot;：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;这是一个死循环！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 没有break语句，永远不会退出循环</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【编程最佳实践】</strong> 当使用无限循环时，一定要确保：</p><ol><li>循环内部有明确的退出条件</li><li>这个退出条件一定能在某个时候满足</li><li>向用户清楚地说明如何退出（如&quot;输入-1退出&quot;）</li></ol><h2 id="🔄-do-while循环-先执行-再判断" tabindex="-1"><a class="header-anchor" href="#🔄-do-while循环-先执行-再判断"><span>🔄 do-while循环：先执行，再判断</span></a></h2><p><code>do-while</code>循环与<code>while</code>循环类似，但有一个重要区别：<code>do-while</code>循环会先执行循环体，然后再检查条件。这意味着循环体至少会执行一次，即使条件一开始就是假的。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体：先执行这里的代码</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 然后检查条件，如果为真，再次执行循环体</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【生活类比】</strong> do-while循环就像是&quot;先尝后判断&quot;：</p><ul><li>先吃一口蛋糕（执行循环体）</li><li>再决定要不要继续吃（检查条件）</li></ul><p>而while循环则是&quot;先判断后尝试&quot;：</p><ul><li>先闻一闻蛋糕是否好闻（检查条件）</li><li>如果好闻才吃一口（执行循环体）</li></ul><p>例如，我们可以使用<code>do-while</code>循环来创建一个简单的菜单系统，这与我们在第7章学习的<code>switch</code>语句结合得很好：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> choice<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 显示菜单</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n===== 游戏菜单 =====&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;1. 开始新游戏&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;2. 加载存档&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;3. 设置&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;4. 退出&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请选择（1-4）：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> choice<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 处理用户选择</span></span>
<span class="line">        <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line">                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;开始新游戏...&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;加载存档...&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;打开设置...&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;谢谢使用，再见！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;无效的选择，请重试。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>choice <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果用户没有选择退出，继续显示菜单</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，菜单至少会显示一次，然后根据用户的选择决定是否继续显示。</p><p><strong>【真实场景】</strong> do-while循环在很多程序中都有应用，例如：</p><ul><li>ATM机的操作界面（先显示选项，再根据用户选择决定是否继续）</li><li>游戏中的&quot;再玩一次？&quot;提示（先玩一次游戏，再问是否继续）</li><li>输入验证（先获取输入，再判断是否有效，如果无效则再次提示输入）</li></ul><h2 id="🚫-continue语句-跳过当前迭代" tabindex="-1"><a class="header-anchor" href="#🚫-continue语句-跳过当前迭代"><span>🚫 continue语句：跳过当前迭代</span></a></h2><p>除了<code>break</code>语句可以完全跳出循环外，还有一个<code>continue</code>语句可以跳过当前迭代的剩余部分，直接进入下一次迭代：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输出1到10之间的所有奇数：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        number<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 如果是偶数，跳过当前迭代的剩余部分</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 只有奇数会被输出</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序会输出：<code>1 3 5 7 9</code>。所有偶数都被<code>continue</code>语句跳过了。</p><p><strong>【生活类比】</strong> 想象你正在分发糖果给小朋友：</p><ul><li>每个小朋友轮流来（循环）</li><li>如果遇到已经拿过糖果的小朋友，你说&quot;你已经有了，请下一位&quot;（continue）</li><li>如果遇到妈妈叫你回家，你停止分发（break）</li></ul><p><strong>【break vs continue】</strong></p><ul><li><code>break</code>：立即结束整个循环，就像电影中途离场</li><li><code>continue</code>：跳过当前这一轮，开始下一轮，就像跳过不喜欢的歌曲，播放列表仍继续</li></ul><h2 id="🪆-嵌套循环-循环中的循环" tabindex="-1"><a class="header-anchor" href="#🪆-嵌套循环-循环中的循环"><span>🪆 嵌套循环：循环中的循环</span></a></h2><p>我们可以在一个循环内部放置另一个循环，这称为嵌套循环。例如，我们可以使用嵌套循环来打印一个乘法表：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;九九乘法表：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;×&quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;=&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">*</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">            j<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序会输出九九乘法表，每行显示从1×1到i×i的乘积。嵌套循环是一个强大的工具，我们将在第10章中更详细地探讨它。</p><p><strong>【生活类比】</strong> 嵌套循环就像是时钟的运转：</p><ul><li>分针走一圈（外层循环）</li><li>秒针需要走60圈（内层循环）</li><li>每次分针走完一圈，秒针都要重新走60圈</li></ul><p><strong>【真实场景】</strong> 嵌套循环在日常生活中非常常见：</p><ul><li>学校的课程表（每天都有不同的课程）</li><li>月历（每个月的每一天）</li><li>电影院的座位排列（排号和座位号）</li></ul><h2 id="📊-常见问题解决方案" tabindex="-1"><a class="header-anchor" href="#📊-常见问题解决方案"><span>📊 常见问题解决方案</span></a></h2><h3 id="_1-重复输出特定内容" tabindex="-1"><a class="header-anchor" href="#_1-重复输出特定内容"><span>1. 重复输出特定内容</span></a></h3><p>有时我们需要重复输出相同的内容多次，例如被罚写相同的句子：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入需要重复的次数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;I don&#39;t say swear words!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【错误处理】</strong> 如果用户输入负数怎么办？我们应该添加输入验证：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个正数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;错误：请输入一个正数！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-计算阶乘" tabindex="-1"><a class="header-anchor" href="#_2-计算阶乘"><span>2. 计算阶乘</span></a></h3><p>阶乘是数学中的一个基本概念，n的阶乘（表示为n!）是所有小于等于n的正整数的乘积：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个正整数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查输入是否有效</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;错误：不能计算负数的阶乘！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">long</span> <span class="token keyword">long</span> factorial <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 使用long long类型以处理较大的结果</span></span>
<span class="line">    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        factorial <span class="token operator">*=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 等价于 factorial = factorial * i;</span></span>
<span class="line">        i<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;! = &quot;</span> <span class="token operator">&lt;&lt;</span> factorial <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【数学连接】</strong> 阶乘在数学中有很多应用，例如：</p><ul><li>计算排列组合的数量（从n个物品中选择k个的方式数量）</li><li>泰勒级数展开（例如e^x的级数展开就用到了阶乘）</li><li>概率论中的分布公式</li></ul><p>注意：对于较大的n值，结果可能会超出long long类型的范围，导致溢出。</p><h3 id="_3-数字反转" tabindex="-1"><a class="header-anchor" href="#_3-数字反转"><span>3. 数字反转</span></a></h3><p>反转一个整数是另一个常见的问题，例如将123反转为321：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> number<span class="token punctuation">,</span> reversed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个整数：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 保存原始数字以便最后显示</span></span>
<span class="line">    <span class="token keyword">int</span> original <span class="token operator">=</span> number<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取最后一位数字</span></span>
<span class="line">        <span class="token keyword">int</span> digit <span class="token operator">=</span> number <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 将这一位添加到反转结果中</span></span>
<span class="line">        reversed <span class="token operator">=</span> reversed <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 移除原数字的最后一位</span></span>
<span class="line">        number <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 等价于 number = number / 10;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;原数字：&quot;</span> <span class="token operator">&lt;&lt;</span> original <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;反转后：&quot;</span> <span class="token operator">&lt;&lt;</span> reversed <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【编程思维】</strong> 数字反转的步骤：</p><ol><li>使用模运算(%)提取最后一位数字</li><li>将结果乘以10并加上提取的数字</li><li>使用整除运算(/)移除原数字的最后一位</li><li>重复上述步骤直到原数字变为0</li></ol><h3 id="_4-查找特定数字" tabindex="-1"><a class="header-anchor" href="#_4-查找特定数字"><span>4. 查找特定数字</span></a></h3><p>有时我们需要在一系列数字中查找特定的值，例如找出所有3的倍数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个上限：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;1到&quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;之间的所有3的倍数：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 从第一个3的倍数开始</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line">        number <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 增加3以获取下一个3的倍数</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【数学启示】</strong> 这个程序很聪明！它不是遍历每个数字然后检查是否是3的倍数，而是直接从3开始，每次递增3。这样做大大减少了计算量，这是一个重要的算法思想：寻找更高效的解决方案！</p><h3 id="_5-计算平均值" tabindex="-1"><a class="header-anchor" href="#_5-计算平均值"><span>5. 计算平均值</span></a></h3><p>计算一系列数字的平均值是另一个常见任务：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一系列数字（输入-1结束）：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> number<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请输入一个数字：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 如果输入-1，跳出循环</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>  <span class="token comment">// 累加输入的数字</span></span>
<span class="line">        count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 计数器加1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">double</span> average <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token operator">/</span> count<span class="token punctuation">;</span>  <span class="token comment">// 计算平均值，转换为double以获得小数结果</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入的&quot;</span> <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;个数字的平均值是：&quot;</span> <span class="token operator">&lt;&lt;</span> average <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;没有输入任何数字！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【真实场景】</strong> 平均值计算在很多实际应用中都很常见：</p><ul><li>学校计算学生的平均成绩</li><li>气象站计算一个月的平均温度</li><li>财务软件计算每月平均支出</li></ul><h2 id="🎮-动手实践" tabindex="-1"><a class="header-anchor" href="#🎮-动手实践"><span>🎮 动手实践</span></a></h2><p>编程最好的学习方式就是动手做！试试下面的小任务：</p><p><strong>【基础练习】</strong> 🌟</p><ol><li>创建一个程序，计算1到100之间所有偶数的和</li></ol><p><strong>【进阶练习】</strong> 🌟🌟 2. 编写一个程序，让用户输入一个正整数n，然后计算并显示n的所有约数</p><p><strong>【挑战练习】</strong> 🌟🌟🌟 3. 创建一个简单的ATM模拟程序，让用户可以查询余额、存款和取款，直到选择退出。确保处理无效输入和余额不足的情况。</p><h2 id="🧠-思考题" tabindex="-1"><a class="header-anchor" href="#🧠-思考题"><span>🧠 思考题</span></a></h2><ol><li><code>while</code>循环和<code>do-while</code>循环有什么区别？什么情况下应该使用<code>do-while</code>循环？</li><li>如果循环的条件一开始就是假的，<code>while</code>循环和<code>do-while</code>循环会有什么不同表现？</li><li>如何使用<code>while</code>循环来反转一个数字？例如，将123反转为321。</li><li>如何使用<code>while</code>循环计算一个数的所有约数？</li><li>什么是&quot;无限循环&quot;？如何安全地使用它？</li></ol><p><strong>【提示】</strong> 思考题2的答案：如果条件一开始就是假的，while循环一次也不会执行，而do-while循环会执行一次循环体后才判断条件。</p><h2 id="🎯-挑战任务" tabindex="-1"><a class="header-anchor" href="#🎯-挑战任务"><span>🎯 挑战任务</span></a></h2><p><strong>【迷你项目：猜单词游戏】</strong> 创建一个简单的&quot;猜单词&quot;游戏：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 预设一个秘密单词</span></span>
<span class="line">    string secretWord <span class="token operator">=</span> <span class="token string">&quot;programming&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建一个遮罩，初始全部是下划线</span></span>
<span class="line">    string mask <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> secretWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        mask <span class="token operator">+=</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">int</span> maxAttempts <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 最大尝试次数</span></span>
<span class="line">    <span class="token keyword">int</span> attempts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 当前尝试次数</span></span>
<span class="line">    string guessedLetters <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 已经猜过的字母</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;===== 猜单词游戏 =====&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;我想了一个单词，你能猜出来吗？&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>attempts <span class="token operator">&lt;</span> maxAttempts <span class="token operator">&amp;&amp;</span> mask <span class="token operator">!=</span> secretWord<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 显示当前状态</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n单词：&quot;</span> <span class="token operator">&lt;&lt;</span> mask <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;已猜过的字母：&quot;</span> <span class="token operator">&lt;&lt;</span> guessedLetters <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;剩余尝试次数：&quot;</span> <span class="token operator">&lt;&lt;</span> maxAttempts <span class="token operator">-</span> attempts <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 获取用户猜测</span></span>
<span class="line">        <span class="token keyword">char</span> guess<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;请猜一个字母：&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        cin <span class="token operator">&gt;&gt;</span> guess<span class="token punctuation">;</span></span>
<span class="line">        guess <span class="token operator">=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 转换为小写</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 检查是否已经猜过这个字母</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>guessedLetters<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;你已经猜过字母 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> guess <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 了！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 添加到已猜过的字母列表</span></span>
<span class="line">        guessedLetters <span class="token operator">+=</span> guess<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 检查猜测是否正确</span></span>
<span class="line">        <span class="token keyword">bool</span> correctGuess <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> secretWord<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>secretWord<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> guess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                mask<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> guess<span class="token punctuation">;</span></span>
<span class="line">                correctGuess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 给出反馈</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>correctGuess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;恭喜！字母 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> guess <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 在单词中！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;抱歉，字母 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> guess <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 不在单词中。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">            attempts<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 游戏结束</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">==</span> secretWord<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n恭喜你猜出了单词：&quot;</span> <span class="token operator">&lt;&lt;</span> secretWord <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;你用了 &quot;</span> <span class="token operator">&lt;&lt;</span> attempts <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; 次错误尝试。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n游戏结束！你已用完所有尝试次数。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;正确的单词是：&quot;</span> <span class="token operator">&lt;&lt;</span> secretWord <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【真实应用】</strong> 这个猜单词游戏类似于传统的&quot;Hangman&quot;（绞刑游戏），它不仅是一个有趣的游戏，还能帮助学习单词拼写。类似的游戏在语言学习应用和教育软件中很常见。在实际开发中，可能会加入更多功能，如词库、难度级别、图形界面等。</p><h2 id="📚-小结" tabindex="-1"><a class="header-anchor" href="#📚-小结"><span>📚 小结</span></a></h2><p>恭喜你完成了第八章！现在你已经：</p><ul><li>🌟 学会了使用<code>while</code>循环和<code>do-while</code>循环让程序重复执行代码</li><li>🌟 了解了<code>break</code>和<code>continue</code>语句的作用</li><li>🌟 掌握了嵌套循环的使用方法</li><li>🌟 能够创建用户交互的循环程序</li><li>🌟 学会了解决常见问题（如重复输出、计算阶乘、数字反转等）</li></ul><p><strong>【下章预告】</strong><code>while</code>循环非常适合当我们不确定需要循环多少次的情况，但有时我们确实知道循环的确切次数。例如，如果我们想打印1到10的所有数字，我们知道需要循环10次。在这种情况下，有一种更适合的循环结构：<code>for</code>循环。在下一章中，我们将学习如何使用<code>for</code>循环来更优雅地处理这类计数循环！</p>`,114)])])}const u=n(l,[["render",t]]),r=JSON.parse('{"path":"/docs/csp/csp_level1/csp_08_Loop_while_Statement/","title":"第8章：循环结构_while语句 🔄","lang":"zh-CN","frontmatter":{"feed":false,"seo":false,"head":[]},"git":{"createdTime":1741319126000,"updatedTime":1742131209000,"contributors":[{"name":"Tivonfeng","username":"Tivonfeng","email":"tivonfeng@163.com","commits":3,"url":"https://github.com/Tivonfeng"}]},"readingTime":{"minutes":16.57,"words":4972},"filePathRelative":"docs/csp/csp_level1/csp_08_Loop_while_Statement/index.md"}');export{u as comp,r as data};
