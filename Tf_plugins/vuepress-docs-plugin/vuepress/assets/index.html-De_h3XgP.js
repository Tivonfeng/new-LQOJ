import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as p,o as e}from"./app-CeA3Z9s4.js";const t={};function l(o,s){return e(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="第9章-循环结构-for语句-🔄" tabindex="-1"><a class="header-anchor" href="#第9章-循环结构-for语句-🔄"><span>第9章：循环结构_for语句 🔄</span></a></h1><h2 id="🗺️-学习地图" tabindex="-1"><a class="header-anchor" href="#🗺️-学习地图"><span>🗺️ 学习地图</span></a></h2><p><strong>【你的学习进度】</strong><br> ✅ 第1章：初识C++<br> ✅ 第2章：C++的输出cout<br> ✅ 第3章：C++的变量<br> ✅ 第4章：C++的输入cin<br> ✅ 第5章：基本数据类型<br> ✅ 第6章：选择结构_if语句<br> ✅ 第7章：选择结构_switch语句<br> ✅ 第8章：循环结构_while语句<br> 👉 第9章：循环结构_for语句【你在这里】<br> ⬜ 第10章：循环结构的嵌套<br> ⬜ 后续章节...</p><h2 id="🎡-循环的另一种形式-for循环的魔力" tabindex="-1"><a class="header-anchor" href="#🎡-循环的另一种形式-for循环的魔力"><span>🎡 循环的另一种形式：for循环的魔力</span></a></h2><p><strong>【故事开始】</strong> 小明正在开发一个简单的游戏，游戏中的角色需要连续跳跃10次才能过关。使用之前学过的while循环，他写出了这样的代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> jumps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>jumps <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;角色跳跃！这是第&quot;</span> <span class="token operator">&lt;&lt;</span> jumps <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;次跳跃。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    jumps<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小红看到后说：&quot;这段代码没问题，但是对于这种&#39;我知道要重复多少次&#39;的情况，C++有一种更专门的循环结构——for循环！它可以让你的代码更简洁，更清晰地表达&#39;我要做某事X次&#39;的意图。&quot;</p><p>今天，我们将和小明一起学习这个强大的循环工具！</p><h2 id="🧩-for循环的基本结构" tabindex="-1"><a class="header-anchor" href="#🧩-for循环的基本结构"><span>🧩 for循环的基本结构</span></a></h2><p>for循环是一种专门用于&quot;计数任务&quot;的循环结构。它的基本语法如下：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 条件检查<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 循环体，当条件为真时执行</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for循环包含三个主要部分，用分号分隔：</p><ol><li><strong>初始化</strong>：在循环开始前执行一次，通常用于初始化计数器变量</li><li><strong>条件检查</strong>：在每次循环迭代前检查，如果为真则执行循环体，否则退出循环</li><li><strong>更新</strong>：在每次循环体执行后执行，通常用于更新计数器变量</li></ol><p>让我们用for循环重写小明的跳跃代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> jumps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> jumps <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> jumps<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;角色跳跃！这是第&quot;</span> <span class="token operator">&lt;&lt;</span> jumps <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;次跳跃。&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【快速检查】</strong> for循环最适合用于什么情况？ A. 当你不知道循环需要执行多少次时 B. 当你知道循环需要执行的确切次数时 C. 当你需要无限循环时 D. 当你需要处理用户输入时</p><p>(思考一下再看答案...答案是B)</p><h2 id="🚀-for循环的执行流程" tabindex="-1"><a class="header-anchor" href="#🚀-for循环的执行流程"><span>🚀 for循环的执行流程</span></a></h2><p>让我们通过一个简单的例子来理解for循环的执行流程：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;🔢 计数从1到5：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;当前数字是：&quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;计数完成！&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【执行流程】</strong></p><ol><li><strong>初始化</strong>：<code>int i = 1</code> 创建并初始化变量i为1</li><li><strong>条件检查</strong>：检查 <code>i &lt;= 5</code> 是否为真（1 &lt;= 5，为真）</li><li><strong>执行循环体</strong>：输出 &quot;当前数字是：1&quot;</li><li><strong>更新</strong>：执行 <code>i++</code>，i变为2</li><li><strong>条件检查</strong>：检查 <code>i &lt;= 5</code> 是否为真（2 &lt;= 5，为真）</li><li><strong>执行循环体</strong>：输出 &quot;当前数字是：2&quot;</li><li><strong>更新</strong>：执行 <code>i++</code>，i变为3</li><li>...（重复步骤5-7，直到i变为6）</li><li><strong>条件检查</strong>：检查 <code>i &lt;= 5</code> 是否为真（6 &lt;= 5，为假）</li><li><strong>退出循环</strong>：输出 &quot;计数完成！&quot;</li></ol><p><strong>【生活类比】</strong> for循环就像是游乐园的旋转木马：</p><ul><li>初始化：你坐上木马（准备开始）</li><li>条件检查：检查是否还有剩余的乘坐时间</li><li>循环体：享受旋转的乐趣</li><li>更新：木马转一圈</li><li>重复检查和旋转，直到时间用完</li><li>退出循环：下木马离开</li></ul><h2 id="🎯-for循环的实际应用" tabindex="-1"><a class="header-anchor" href="#🎯-for循环的实际应用"><span>🎯 for循环的实际应用</span></a></h2><h3 id="_1-求和" tabindex="-1"><a class="header-anchor" href="#_1-求和"><span>1. 求和</span></a></h3><p>for循环非常适合用于计算一系列数字的和：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;计算1到100的和：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 每10个数字报告一次进度</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;已经计算到&quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;，当前和为&quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;最终结果：1+2+...+100 = &quot;</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-倒计时" tabindex="-1"><a class="header-anchor" href="#_2-倒计时"><span>2. 倒计时</span></a></h3><p>for循环也可以从大到小计数：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;🚀 发射倒计时：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;...&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 在实际程序中，可以添加一个延时函数</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;发射！🚀&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-字符串处理" tabindex="-1"><a class="header-anchor" href="#_3-字符串处理"><span>3. 字符串处理</span></a></h3><p>for循环可以用来处理字符串中的每个字符：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    string message <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    string transformed <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;原始字符串：&quot;</span> <span class="token operator">&lt;&lt;</span> message <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;转换过程：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> message<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">char</span> c <span class="token operator">=</span> message<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 将小写字母转换为大写，将大写字母转换为小写</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            transformed <span class="token operator">+=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;将 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 转换为 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">toupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            transformed <span class="token operator">+=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;将 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 转换为 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">tolower</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            transformed <span class="token operator">+=</span> c<span class="token punctuation">;</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;保持 &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; 不变&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;转换后的字符串：&quot;</span> <span class="token operator">&lt;&lt;</span> transformed <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="⚠️-for循环的常见错误" tabindex="-1"><a class="header-anchor" href="#⚠️-for循环的常见错误"><span>⚠️ for循环的常见错误</span></a></h2><h3 id="_1-无限循环" tabindex="-1"><a class="header-anchor" href="#_1-无限循环"><span>1. 无限循环</span></a></h3><p>如果忘记更新循环变量或条件永远为真，会导致无限循环：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// 错误示例：无限循环</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// i永远大于0，循环永不结束</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-循环变量的作用域" tabindex="-1"><a class="header-anchor" href="#_2-循环变量的作用域"><span>2. 循环变量的作用域</span></a></h3><p>在C++中，for循环初始化部分声明的变量只在循环内部可见：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// cout &lt;&lt; &quot;循环结束后i的值：&quot; &lt;&lt; i &lt;&lt; endl;  // 错误！i在这里不可见</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要在循环外部使用循环变量，应该在循环外部声明它：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;循环结束后i的值：&quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 正确，i在这里可见</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎨-for循环的艺术-创建图案" tabindex="-1"><a class="header-anchor" href="#🎨-for循环的艺术-创建图案"><span>🎨 for循环的艺术：创建图案</span></a></h2><p>for循环可以用来创建各种有趣的图案。例如，我们可以使用嵌套的for循环（一个循环内部包含另一个循环）来创建一个三角形图案：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span></span>
<span class="line"><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;创建一个三角形图案：&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> height<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 打印i个星号</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;* &quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">创建一个三角形图案：</span>
<span class="line">* </span>
<span class="line">* * </span>
<span class="line">* * * </span>
<span class="line">* * * * </span>
<span class="line">* * * * * </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>【编程思维】</strong> 嵌套循环是一个强大的工具，我们将在下一章详细学习。现在，你只需要知道它可以用来创建二维图案或处理二维数据。</p><h2 id="🎮-动手实践" tabindex="-1"><a class="header-anchor" href="#🎮-动手实践"><span>🎮 动手实践</span></a></h2><p>编程最好的学习方式就是动手做！试试下面的小任务：</p><p><strong>【基础练习】</strong> 🌟</p><ol><li>编写一个程序，使用for循环计算5的阶乘（5! = 5×4×3×2×1）</li></ol><p><strong>【进阶练习】</strong> 🌟🌟 2. 编写一个程序，使用for循环打印出斐波那契数列的前10个数（1, 1, 2, 3, 5, 8, 13, 21, 34, 55）</p><p><strong>【挑战练习】</strong> 🌟🌟🌟 3. 编写一个程序，使用for循环判断一个数是否为素数（只能被1和自身整除的数）</p><h2 id="🧠-思考题" tabindex="-1"><a class="header-anchor" href="#🧠-思考题"><span>🧠 思考题</span></a></h2><ol><li>for循环和while循环有什么区别？什么情况下应该使用for循环，什么情况下应该使用while循环？</li><li>如何使用for循环计算1到100中所有偶数的和？</li><li>如何使用for循环反转一个字符串？</li></ol><p><strong>【提示】</strong> 思考题2的解决方法：可以使用 <code>if (i % 2 == 0)</code> 来判断i是否为偶数，或者直接让i从2开始，每次增加2。</p><h2 id="📚-小结" tabindex="-1"><a class="header-anchor" href="#📚-小结"><span>📚 小结</span></a></h2><p>恭喜你学完了第九章！现在你已经：</p><ul><li>🌟 掌握了for循环的基本结构和执行流程</li><li>🌟 学会了使用for循环进行计数、求和和字符串处理</li><li>🌟 了解了for循环的常见错误和注意事项</li><li>🌟 初步接触了嵌套循环的概念</li></ul><p>for循环是一个强大的工具，特别适合那些需要重复特定次数的任务。它使代码更简洁、更易读，是C++编程中不可或缺的一部分。</p><p><strong>【下章预告】</strong> 在第十章中，我们将深入学习嵌套循环的概念，探索如何使用循环中的循环来处理更复杂的问题和创建更复杂的图案。准备好迎接更高级的挑战了吗？</p>`,63)])])}const r=n(t,[["render",l]]),u=JSON.parse('{"path":"/docs/csp/csp_level1/csp_09_Loop_for_Statement/","title":"第9章：循环结构_for语句 🔄","lang":"zh-CN","frontmatter":{},"git":{"createdTime":1741319126000,"updatedTime":1742131209000,"contributors":[{"name":"Tivonfeng","username":"Tivonfeng","email":"tivonfeng@163.com","commits":4,"url":"https://github.com/Tivonfeng"}]},"readingTime":{"minutes":6.66,"words":1998},"filePathRelative":"docs/csp/csp_level1/csp_09_Loop_for_Statement/index.md","excerpt":"\\n<h2>🗺️ 学习地图</h2>\\n<p><strong>【你的学习进度】</strong><br>\\n✅ 第1章：初识C++<br>\\n✅ 第2章：C++的输出cout<br>\\n✅ 第3章：C++的变量<br>\\n✅ 第4章：C++的输入cin<br>\\n✅ 第5章：基本数据类型<br>\\n✅ 第6章：选择结构_if语句<br>\\n✅ 第7章：选择结构_switch语句<br>\\n✅ 第8章：循环结构_while语句<br>\\n👉 第9章：循环结构_for语句【你在这里】<br>\\n⬜ 第10章：循环结构的嵌套<br>\\n⬜ 后续章节...</p>\\n<h2>🎡 循环的另一种形式：for循环的魔力</h2>"}');export{r as comp,u as data};
