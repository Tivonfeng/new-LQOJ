import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as e,o as p}from"./app-CeA3Z9s4.js";const t="/docs/assets/image-2-DibWHuMx.png",l={};function i(o,n){return p(),a("div",null,[...n[0]||(n[0]=[e(`<h1 id="python世界的高级物种们-字符串" tabindex="-1"><a class="header-anchor" href="#python世界的高级物种们-字符串"><span>Python世界的高级物种们 ｜ 字符串</span></a></h1><h2 id="〽️-什么是字符串" tabindex="-1"><a class="header-anchor" href="#〽️-什么是字符串"><span>〽️ 什么是字符串</span></a></h2><p>英文、符号、数字等组成的一连串的字符</p><h2 id="〽️-字符串的创建" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的创建"><span>〽️ 字符串的创建</span></a></h2><ol><li>创建一个字符串，下面几种方式，都是在创建一个字符串</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token string">&#39;hello LQcode!&#39;</span></span>
<span class="line"><span class="token string">&quot;hello LQcode!&quot;</span></span>
<span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;hello LQcode!&#39;&#39;&#39;</span></span>
<span class="line"><span class="token triple-quoted-string string">&quot;&quot;&quot;hello LQcode!&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>给字符串找个家，以上创建出来的字符串就像被随意扔在内容空间的一个无家可归的宝宝，他找不到我们，我们也找不到他，所以我们需要给他找个家</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">word1 <span class="token operator">=</span> <span class="token string">&#39;hello LQcode!&#39;</span></span>
<span class="line">word2 <span class="token operator">=</span> <span class="token string">&quot;hello LQcode!&quot;</span></span>
<span class="line">word3 <span class="token operator">=</span> <span class="token triple-quoted-string string">&#39;&#39;&#39;hello LQcode!&#39;&#39;&#39;</span></span>
<span class="line">word4 <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;hello LQcode!&quot;&quot;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="〽️-字符串的访问" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的访问"><span>〽️ 字符串的访问</span></a></h2><h3 id="🎈-普通访问" tabindex="-1"><a class="header-anchor" href="#🎈-普通访问"><span>🎈 普通访问</span></a></h3><p>使用下标来进行普通访问字符串中的单个字符</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">word1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 访问到的字符是 &#39;h&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="🎈-切片访问" tabindex="-1"><a class="header-anchor" href="#🎈-切片访问"><span>🎈 切片访问</span></a></h3><p>切出一片元素，且切出来的类型，仍然是一个字符串</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">word1 <span class="token operator">=</span> <span class="token string">&#39;hello LQcode!&#39;</span></span>
<span class="line">word1<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">:</span>step<span class="token punctuation">]</span> <span class="token comment"># start是开始的下标，end是结束的下标，step是步长</span></span>
<span class="line">word1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># &#39;he&#39;</span></span>
<span class="line">word1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># &#39;he&#39;,step省略不写的话，默认是1</span></span>
<span class="line">word1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># &#39;ello LQcode!&#39;,end省略不写的话，默认是访问到字符串的最后</span></span>
<span class="line">word1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># &#39;he&#39;,start省略不写的话，默认是0,从头开始访问</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🎈-负数索引" tabindex="-1"><a class="header-anchor" href="#🎈-负数索引"><span>🎈 负数索引</span></a></h3><h3 id="🎈-遍历访问" tabindex="-1"><a class="header-anchor" href="#🎈-遍历访问"><span>🎈 遍历访问</span></a></h3><ol><li>直接遍历</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">word1 <span class="token operator">=</span> <span class="token string">&#39;hello LQcode!&#39;</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> word1<span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：h e l l o   L Q c o d e!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> word1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：h e l</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>通过下标来遍历</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">word1 <span class="token operator">=</span> <span class="token string">&#39;hello LQcode!&#39;</span></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token keyword">print</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment"># 输出结果为：h e l l o   L Q c o d e!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="〽️-字符串的修改操作" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的修改操作"><span>〽️ 字符串的修改操作</span></a></h2><p>字符串本身不支持修改</p><h2 id="〽️-字符串的增加操作" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的增加操作"><span>〽️ 字符串的增加操作</span></a></h2><p>字符串本身不支持修改</p><h2 id="〽️-字符串的删除操作" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的删除操作"><span>〽️ 字符串的删除操作</span></a></h2><p>字符串本身不支持修改</p><h2 id="〽️-字符串的运算" tabindex="-1"><a class="header-anchor" href="#〽️-字符串的运算"><span>〽️ 字符串的运算</span></a></h2><ol><li>&#39;+&#39; 加运算</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;world&#39;</span>	<span class="token comment"># &#39;helloworld&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>&#39;*&#39; 乘运算</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token string">&#39;hello&#39;</span> <span class="token operator">*</span> <span class="token number">3</span>		<span class="token comment"># &#39;hellohellohello&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>in 运算</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token string">&#39;hello&#39;</span> <span class="token keyword">in</span> <span class="token string">&#39;hello world&#39;</span>	<span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>not in 运算</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token string">&#39;hello&#39;</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token string">&#39;hello world&#39;</span>	<span class="token comment"># False	</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="〽️-字符串对象的常用方法" tabindex="-1"><a class="header-anchor" href="#〽️-字符串对象的常用方法"><span>〽️ 字符串对象的常用方法</span></a></h2><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line">s <span class="token operator">=</span> <span class="token string">&#39;学习Python&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 替换</span></span>
<span class="line">s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># &#39;学习Java&#39;</span></span>
<span class="line"><span class="token comment"># 查找，find()、index()、rfind()、rindex()</span></span>
<span class="line">s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 3, 返回第一次出现的子串的下标</span></span>
<span class="line">s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>			<span class="token comment"># 6, 设定下标2开始查找</span></span>
<span class="line">s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">&#39;23333&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># -1, 查找不到返回-1</span></span>
<span class="line">s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;y&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># 4, 返回第一次出现的子串的下标</span></span>
<span class="line">s<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">&#39;P&#39;</span><span class="token punctuation">)</span>		<span class="token comment"># 不同与find(), 查找不到会抛出异常</span></span>
<span class="line"><span class="token comment"># 转大小写, upper()、lower()、swapcase()、capitalize()、istitle()、isupper()、islower()</span></span>
<span class="line">s<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># &#39;学习PYTHON&#39;</span></span>
<span class="line">s<span class="token punctuation">.</span>swapcase<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># &#39;学习pYTHON&#39;, 大小写互换</span></span>
<span class="line">s<span class="token punctuation">.</span>istitle<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># True</span></span>
<span class="line">s<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span>			<span class="token comment"># False</span></span>
<span class="line"><span class="token comment"># 去空格,strip()、lstrip()、rstrip()</span></span>
<span class="line"><span class="token comment"># 格式化</span></span>
<span class="line">s1 <span class="token operator">=</span> <span class="token string">&#39;%s %s&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">&#39;Windrivder&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>	<span class="token comment"># &#39;Windrivder 21&#39;</span></span>
<span class="line">s2 <span class="token operator">=</span> <span class="token string">&#39;{}, {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&#39;Windridver&#39;</span><span class="token punctuation">)</span>	<span class="token comment"># 推荐使用format格式化字符串</span></span>
<span class="line">s3 <span class="token operator">=</span> <span class="token string">&#39;{0}, {1}, {0}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">&#39;Windrivder&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span></span>
<span class="line">s4 <span class="token operator">=</span> <span class="token string">&#39;{name}: {age}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>age<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;Windrivder&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 连接与分割，使用 + 连接字符串，每次操作会重新计算、开辟、释放内存，效率很低，所以推荐使用join</span></span>
<span class="line">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;2017&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;29&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;22:00&#39;</span><span class="token punctuation">]</span></span>
<span class="line">s5 <span class="token operator">=</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span>			<span class="token comment"># &#39;2017-03-29-22:00&#39;</span></span>
<span class="line">s6 <span class="token operator">=</span> s5<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>			<span class="token comment"># [&#39;2017&#39;, &#39;03&#39;, &#39;29&#39;, &#39;22:00&#39;]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="补充-转义字符" tabindex="-1"><a class="header-anchor" href="#补充-转义字符"><span>补充 转义字符</span></a></h2><p>在需要在字符中使用特殊字符时，python 用反斜杠 \\ 转义字符。如下表： <img src="`+t+'" alt="Alt text" loading="lazy"></p>',40)])])}const u=s(l,[["render",i]]),d=JSON.parse(`{"path":"/docs/python/python_level2/python_02_sequence/python_02_str/","title":"Python世界的高级物种们 ｜ 字符串","lang":"zh-CN","frontmatter":{},"git":{"createdTime":1696898537000,"updatedTime":1719199244000,"contributors":[{"name":"Tivonfeng","username":"Tivonfeng","email":"tivonfeng@163.com","commits":9,"url":"https://github.com/Tivonfeng"},{"name":"Tivon feng","username":"","email":"tivonfeng@gmail.com","commits":1}]},"readingTime":{"minutes":2.55,"words":766},"filePathRelative":"docs/python/python_level2/python_02_sequence/python_02_str/index.md","excerpt":"\\n<h2>〽️ 什么是字符串</h2>\\n<p>英文、符号、数字等组成的一连串的字符</p>\\n<h2>〽️ 字符串的创建</h2>\\n<ol>\\n<li>创建一个字符串，下面几种方式，都是在创建一个字符串</li>\\n</ol>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"py\\"><pre><code class=\\"language-python\\"><span class=\\"line\\"><span class=\\"token string\\">'hello LQcode!'</span></span>\\n<span class=\\"line\\"><span class=\\"token string\\">\\"hello LQcode!\\"</span></span>\\n<span class=\\"line\\"><span class=\\"token triple-quoted-string string\\">'''hello LQcode!'''</span></span>\\n<span class=\\"line\\"><span class=\\"token triple-quoted-string string\\">\\"\\"\\"hello LQcode!\\"\\"\\"</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{u as comp,d as data};
