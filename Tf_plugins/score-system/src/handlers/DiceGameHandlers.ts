import {
    Handler,
} from 'hydrooj';
import {
    ScoreService,
    DiceGameService,
    type UserDiceStats
} from '../services';
import { DEFAULT_CONFIG } from './config';

/**
 * Êé∑È™∞Â≠êÊ∏∏ÊàèÂ§ßÂéÖÂ§ÑÁêÜÂô®
 * Ë∑ØÁî±: /score/dice
 * ÂäüËÉΩ: Êé∑È™∞Â≠êÊ∏∏Êàè‰∏ªÁïåÈù¢ÔºåÂ±ïÁ§∫Ê∏∏ÊàèËßÑÂàô„ÄÅÁî®Êà∑ÁªüËÆ°„ÄÅÊúÄËøëÊ∏∏ÊàèËÆ∞ÂΩï
 */
export class DiceGameHandler extends Handler {
    async get() {
        const uid = this.user?._id;
        
        if (!uid) {
            this.response.redirect = this.url('user_login');
            return;
        }

        const scoreService = new ScoreService(DEFAULT_CONFIG, this.ctx);
        const diceService = new DiceGameService(this.ctx, scoreService);
        
        // Ëé∑ÂèñÁî®Êà∑ÁßØÂàÜ
        const userScore = await scoreService.getUserScore(this.domain._id, uid);
        const currentCoins = userScore?.totalScore || 0;
        
        // Ëé∑ÂèñÁî®Êà∑Ê∏∏ÊàèÁªüËÆ°
        const userStats = await diceService.getUserDiceStats(this.domain._id, uid);
        
        // Ëé∑ÂèñÊúÄËøëÊ∏∏ÊàèËÆ∞ÂΩï
        const recentGames = await diceService.getUserGameHistory(this.domain._id, uid, 10);

        // Ëé∑ÂèñÊ∏∏ÊàèÈÖçÁΩÆ
        const gameConfig = diceService.getGameConfig();

        // Ê£ÄÊü•Áî®Êà∑ÂèØ‰ª•‰∏ãÊ≥®ÁöÑÊúÄÂ§ßÈáëÈ¢ù
        const availableBets = gameConfig.availableBets.filter(bet => currentCoins >= bet);

        // Ê†ºÂºèÂåñÊ∏∏ÊàèËÆ∞ÂΩïÊó∂Èó¥
        const formattedGames = recentGames.map(game => ({
            ...game,
            gameTime: game.gameTime.toLocaleString('zh-CN', {
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            })
        }));

        // ËÆ°ÁÆóËÉúÁéá
        const winRate = userStats && userStats.totalGames > 0 
            ? (userStats.totalWins / userStats.totalGames * 100).toFixed(1)
            : '0.0';

        this.response.template = 'dice_game.html';
        this.response.body = {
            currentCoins,
            canPlay: availableBets.length > 0,
            availableBets,
            gameConfig,
            userStats: userStats || {
                totalGames: 0,
                totalWins: 0,
                netProfit: 0,
                winStreak: 0,
                maxWinStreak: 0
            },
            winRate,
            recentGames: formattedGames,
        };
    }
}

/**
 * Êé∑È™∞Â≠êÊ∏∏ÊàèÊâßË°åÂ§ÑÁêÜÂô®
 * Ë∑ØÁî±: /score/dice/play
 * ÂäüËÉΩ: ÊâßË°åÊé∑È™∞Â≠êÊ∏∏ÊàèÊìç‰ΩúÔºåËøîÂõûÊ∏∏ÊàèÁªìÊûú
 */
export class DicePlayHandler extends Handler {
    async prepare() {
        if (!this.user._id) throw new Error('Êú™ÁôªÂΩï');
    }

    async post() {
        const { guess, betAmount } = this.request.body;
        
        if (!['big', 'small'].includes(guess)) {
            this.response.body = { success: false, message: 'Êó†ÊïàÁöÑÁåúÊµãÈÄâÈ°π' };
            return;
        }

        const betAmountNum = parseInt(betAmount);
        if (!betAmountNum || ![20, 50, 100].includes(betAmountNum)) {
            this.response.body = { success: false, message: 'Êó†ÊïàÁöÑÊäïÊ≥®ÈáëÈ¢ùÔºåËØ∑ÈÄâÊã©20„ÄÅ50Êàñ100ÁßØÂàÜ' };
            return;
        }

        const scoreService = new ScoreService(DEFAULT_CONFIG, this.ctx);
        const diceService = new DiceGameService(this.ctx, scoreService);
        
        const result = await diceService.playDiceGame(
            this.domain._id,
            this.user._id,
            guess as 'big' | 'small',
            betAmountNum
        );
        
        this.response.body = result;
    }
}

/**
 * Êé∑È™∞Â≠êÊ∏∏ÊàèÂéÜÂè≤Â§ÑÁêÜÂô®
 * Ë∑ØÁî±: /score/dice/history
 * ÂäüËÉΩ: Â±ïÁ§∫Áî®Êà∑ÁöÑÊé∑È™∞Â≠êÊ∏∏ÊàèÂéÜÂè≤ËÆ∞ÂΩïÔºåÊîØÊåÅÂàÜÈ°µ
 */
export class DiceHistoryHandler extends Handler {
    async prepare() {
        if (!this.user._id) throw new Error('Êú™ÁôªÂΩï');
    }

    async get() {
        const page = Math.max(1, parseInt(this.request.query.page as string) || 1);
        const limit = 20;

        const scoreService = new ScoreService(DEFAULT_CONFIG, this.ctx);
        const diceService = new DiceGameService(this.ctx, scoreService);
        
        // Ëé∑ÂèñÂàÜÈ°µÊ∏∏ÊàèÂéÜÂè≤
        const historyData = await diceService.getUserGameHistoryPaged(
            this.domain._id, 
            this.user._id, 
            page, 
            limit
        );

        // Ëé∑ÂèñÁî®Êà∑ÁªüËÆ°
        const userStats = await diceService.getUserDiceStats(this.domain._id, this.user._id);
        
        // Ê†ºÂºèÂåñÊ∏∏ÊàèËÆ∞ÂΩïÊó∂Èó¥
        const formattedRecords = historyData.records.map(record => ({
            ...record,
            gameTime: record.gameTime.toLocaleString('zh-CN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            }),
            diceEmoji: this.getDiceEmoji(record.diceValue),
            resultText: record.actualResult === 'big' ? 'Â§ß' : 'Â∞è',
            guessText: record.guess === 'big' ? 'Â§ß' : 'Â∞è'
        }));

        // ËÆ°ÁÆóÁªüËÆ°‰ø°ÊÅØ
        const winRate = userStats && userStats.totalGames > 0
            ? (userStats.totalWins / userStats.totalGames * 100).toFixed(1)
            : '0.0';

        this.response.template = 'dice_history.html';
        this.response.body = {
            records: formattedRecords,
            page,
            total: historyData.total,
            totalPages: historyData.totalPages,
            userStats: userStats || {
                totalGames: 0,
                totalWins: 0,
                netProfit: 0,
                winStreak: 0,
                maxWinStreak: 0
            },
            winRate,
        };
    }

    /**
     * Ê†πÊçÆÈ™∞Â≠êÁÇπÊï∞ËøîÂõûÂØπÂ∫îemoji
     * @param value È™∞Â≠êÁÇπÊï∞
     * @returns ÂØπÂ∫îÁöÑemoji
     */
    private getDiceEmoji(value: number): string {
        const diceEmojis = ['', '‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value] || 'üé≤';
    }
}

/**
 * Êé∑È™∞Â≠êÊ∏∏ÊàèÁªüËÆ°Â§ÑÁêÜÂô®ÔºàÁÆ°ÁêÜÂëòÔºâ
 * Ë∑ØÁî±: /score/dice/admin
 * ÂäüËÉΩ: ÁÆ°ÁêÜÂëòÊü•ÁúãÊ∏∏ÊàèÁ≥ªÁªüÁªüËÆ°‰ø°ÊÅØ
 */
export class DiceAdminHandler extends Handler {
    async prepare() {
        // ÂèØ‰ª•Ê†πÊçÆÈúÄË¶ÅÊ∑ªÂä†ÁÆ°ÁêÜÂëòÊùÉÈôêÊ£ÄÊü•
        // this.checkPerm(PERM.PERM_EDIT_DOMAIN);
    }

    async get() {
        const scoreService = new ScoreService(DEFAULT_CONFIG, this.ctx);
        const diceService = new DiceGameService(this.ctx, scoreService);
        
        // Ëé∑ÂèñÁ≥ªÁªüÁªüËÆ°
        const systemStats = await diceService.getSystemStats(this.domain._id);
        
        // Ëé∑ÂèñÊúÄËøëÊ∏∏ÊàèËÆ∞ÂΩï (ÊâÄÊúâÁî®Êà∑)
        const recentGames = await this.ctx.db.collection('dice.records' as any)
            .find({ domainId: this.domain._id })
            .sort({ gameTime: -1 })
            .limit(50)
            .toArray();

        // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
        const uids = [...new Set(recentGames.map(g => g.uid))];
        const UserModel = global.Hydro.model.user;
        const udocs = await UserModel.getList(this.domain._id, uids);

        // Ê†ºÂºèÂåñÊúÄËøëÊ∏∏ÊàèËÆ∞ÂΩï
        const formattedGames = recentGames.map(game => ({
            ...game,
            gameTime: game.gameTime.toLocaleString('zh-CN', {
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            }),
            diceEmoji: this.getDiceEmoji(game.diceValue),
            resultText: game.actualResult === 'big' ? 'Â§ß' : 'Â∞è',
            guessText: game.guess === 'big' ? 'Â§ß' : 'Â∞è'
        }));

        this.response.template = 'dice_admin.html';
        this.response.body = {
            systemStats,
            recentGames: formattedGames,
            udocs,
        };
    }

    private getDiceEmoji(value: number): string {
        const diceEmojis = ['', '‚öÄ', '‚öÅ', '‚öÇ', '‚öÉ', '‚öÑ', '‚öÖ'];
        return diceEmojis[value] || 'üé≤';
    }
}